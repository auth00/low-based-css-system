@use 'sass:map';

@import './tools.scss';

$custom-props: () !global;

$realms: (color-scheme, space, typesetting) !global;

@each $realm in $realms {
  $custom-props: map.set($custom-props, $realm, ()) !global;
}

/*
 * Mixin used to create custom property with content class fallback
 */
@mixin prop($prop, $realm, $value, $name: '', $class: '') {
  @if $class != '' {
    $custom_prop: '--#{$realm}--#{$class}--#{$name}--#{$prop}';
    $custom_prop_fallback: '--#{$realm}--#{$class}--#{$prop}';

    --_#{$prop}: var(#{$custom_prop}, var(#{$custom_prop_fallback}, #{$value}));

    $custom-props: map.set(
      $custom-props,
      $realm,
      map.merge(
        map.get($custom-props, $realm),
        (
          $custom_prop_fallback: 'revert',
        )
      )
    ) !global;
    $custom-props: map.set(
      $custom-props,
      $realm,
      map.merge(
        map.get($custom-props, $realm),
        (
          $custom_prop: $value,
        )
      )
    ) !global;
  } @else {
    $custom_prop: '--#{$realm}--#{$prop}';

    --_#{$prop}: var(#{$custom_prop}, #{$value});

    $custom-props: map.set(
      $custom-props,
      $realm,
      map.merge(
        map.get($custom-props, $realm),
        (
          $custom_prop: $value,
        )
      )
    ) !global;
  }
}

/*
 * Mixin used to create typografy sets
 */
@mixin typesetting($name, $selectors, $value) {
  #{$selectors} {
    @extend %content--class--text;

    @each $realm,
      $props
        in (
          space: (
            vspace-before,
            vspace-after,
          ),
          typesetting: (
            font-size,
            font-family,
            font-weight,
            line-height,
          ),
          color-scheme: (
            text-color,
          )
        )
    {
      @each $prop in $props {
        @if map.has-key($value, $prop) {
          @include prop($prop, $realm, map.get($value, $prop), $name, 'text');
        } @else {
          @include prop($prop, $realm, inital, $name, 'text');
        }
      }
    }
  }
}

@mixin realm-reset($realm) {
  @each $custom_prop,
    $custom_prop_value in map-sort(map.get($custom-props, $realm))
  {
    #{$custom_prop}: #{$custom_prop_value};
  }
}

/*
* Debug purposes only
* Theme is a special abstract class that defines every custom property
* used in the css system.
*/
@mixin theme-props {
  @each $realm, $realm-props in $custom-props {
    @each $custom_prop, $custom_prop_value in map-sort($realm-props) {
      --_#{$custom_prop}: #{$custom_prop_value};
    }
  }
}

// Anywhere in the tree we can switch over to another theme
.theme--full-width {
  --content--width--normal: 100%;
  --content--width--narrow: 100%;
}

.theme--vspace--1 {
  --_vspace--header: 0px;
}

/*
 * The content items share some properties but they
 * do not share a "base class". The class .content 
 * can be used to make any markup "content" but it 
 * is also extended by other tags and classes like 
 * p, img and .preamble to make them become content.
 */
%content {
  --_content--width: var(--content--width, var(--content--width--default));
  --_content--air: var(--content--air, var(--content--air--default));

  --_text-align: var(
    --content--text-align,
    var(--content--text-align--default)
  );
}

%content {
  position: relative;
  //width: calc(100% - var(--_content--air)*2);
  max-width: \min(
    var(--_content--width, 0px),
    calc(
      100vw - var(--scrollbar--width, 0px) - var(--content--air--default, 0px) *
        2
    )
  );
  margin-top: var(--_vspace-before);
  margin-bottom: var(--_vspace-after);
  margin-inline: auto;
  padding: 0 var(--_content--air);
  font-family: var(--_font-family);
  font-size: var(--_font-size);
  line-height: var(--_line-height);
  text-align: var(--_text-align);
  color: var(--_text-color);
}

.content--align--center {
  --content--text-align: center;
}

/*
 * These utility modifiers can be used to alter 
 * content behaviour.
 */
.content--width--normal {
  // "normal" is a reserved content width keyword
  --content--width: var(--content--width--normal, 500px);
}

.content--width--full {
  // "full" is a reserved content width keyword and is always 100%
  --content--width: 100%;
}

/*
 * Air usage can be set per content instance using a class.
 */
.content--air--none {
  --content--air: 0;
}

.content--air--normal {
  --content--air: var(--content--air--normal, 5px);
}

/*
 * The total margin is largest positive margin -
 * largest negative margin so this will make sure
 * that the margin above and below an item is always
 * 0.
 *
 * Due to how margin collapsing works this markup somewhere 
 * between two content elements will make them have no
 * space between them.
 * <div class="content--vspace--none"><div></div></div>
 *
 * Any content class can also implement a "marginkiller"
 * by adding @extend .content--vspace--none to to some 
 * part of the component markup. Columns does this for each
 * item to ensure css "gap" is the feature providing the space.
 */
.content--vspace--none {
  @extend .content--vspace-before--none;
  @extend .content--vspace-after--none;
}

.content--vspace-before--none {
  margin-top: 999px;

  > * {
    margin-top: -999px;
  }
}

.content--vspace-after--none {
  margin-bottom: 999px;

  > * {
    margin-bottom: -999px;
  }
}

/*
 * Default anonymous classes to support different
 * default behaviors for different kind of content.
 */
%content--defaults--width--normal {
  --content--width--default: var(--content--width--normal, 600px);
}

%content--defaults--width--full {
  --content--width--default: 100%;
}

%content--defaults--air--none {
  --content--air--default: 0px;
}

%content--defaults--air--normal {
  --content--air--default: var(--content--air--normal, 5px);
}

//$content_media_image: img, ".img";
// $content_media_video: ???;
// $content_media_map: ???;
//$content_item_teaser: ".teaser";

/*
 * Text is a content class
 * defaults:
 *  * air:on
 *  * width:normal
 */
%content--class--text {
  @extend %content;
  @extend %content--defaults--air--normal;
  @extend %content--defaults--width--normal;
}

/*
 * Media is a content class
 * defaults:
 *  * air:off
 *  * width:normal
 */
%content--class--media {
  @extend %content;
  @extend %content--defaults--air--none;
  @extend %content--defaults--width--normal;
}

/*
 * All widgets need to be at least two divs
 * div > div
 * defaults:
 *  * air:off
 *  * width:full
 */
%content--class--widget {
  @extend %content;
  @extend %content--defaults--air--none;
  @extend %content--defaults--width--full;

  > div {
    display: block flow-root;
  }
}

/*
 * content of class color-scheme is are
 * capable of altering the current color-scheme
 * All color-scheme classes are also widgets
 */
%content--class--color-scheme {
  @extend %content--class--widget;

  @include prop(background-color, color-scheme, revert);

  background-color: var(--_background-color);

  > div {
    display: block flow-root; // Needed to make sure margins are filled

    @include realm-reset(color-scheme);

    --color-scheme--background-color: var(
      --color-scheme--background-color--contrast,
      revert
    );
  }
}

/*
 * Groups provides a way to group content together and
 * should handle stuff like:
 *  * color-schemes
 *  * dividers like borders
 *  * ???
 *
 * The group resets the flow box
 * The markup is always 2 divs with modifiers on the first:
 *  div.group[.modifiers] > div
 *
 *
 */
%group {
  @extend %content--class--color-scheme;

  > div {
    overflow-x: auto;
    margin-top: var(--_vspace--header, var(--_group--vspace--header--default));
    margin-bottom: var(
      --_vspace--footer,
      var(--_group--vspace--footer--default)
    );

    > :first-child {
      .group--header {
        margin-top: calc(-1 * var(--_vspace--header));
      }
    }

    > :last-child {
      .group--footer {
        margin-bottom: calc(-1 * var(--_vspace--footer));
      }
    }

    > :first-child:last-child {
      .group--banner {
        margin-top: calc(-1 * var(--_vspace--header));
        margin-bottom: calc(-1 * var(--_vspace--footer));
      }
    }
  }
}

/*
 * TODO: Define a
 */
%columns {
  @extend %content--class--widget;
  @extend %content--defaults--air--normal;

  //grid-template-columns: repeat(3, 1fr);
  //

  > div {
    display: flex;
    flex-wrap: wrap;
    align-content: center;
    gap: 20px;
    > div {
      flex: 1 1 20px;
      > div {
        @extend .content--vspace--none;
      }
    }
  }
}

/*
 * TODO: This needs to be worked more on
 */
/*
 * This is some sort of generic image.
 * This should probably support <picture>
 * and other image related features.
 */
%img {
  @extend %content--class--media;
  @extend %content--defaults--air--none;

  @include prop(vspace-before, space, 0px, img, media);
  @include prop(vspace-after, space, 0px, img, media);

  > div {
    background-size: cover;
    height: 90px;
    max-width: 100%;
    background-image: url(https://picsum.photos/400/30);
  }
}
%img-embed {
  @extend %content--class--media;
  @extend %content--defaults--air--normal;

  @include prop(vspace-before, space, 0px, img-embed, media);
  @include prop(vspace-after, space, 0px, img-embed, media);

  > div {
    background-size: cover;
    height: 90px;
    max-width: 100%;
    background-image: url(https://picsum.photos/400/30);
  }
}
